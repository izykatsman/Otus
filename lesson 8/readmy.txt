Пошаговая инструкция для настройки репликации в PostgreSQL с использованием Docker-compose
1. Запуск контейнеров
docker-compose -f docker-compose.yml up
2. Вход в контейнер master
docker exec -it master bash
3. Создание пользователя для репликации
su - postgres
createuser --replication -P repluser
Запоминаем пароль.

4. Настройка параметров конфигурации PostgreSQL
Открываем файл postgresql.conf и добавляем следующие строки:
wal_level = replica
max_wal_senders = 2
max_replication_slots = 2
hot_standby = on
hot_standby_feedback = on
recovery_min_apply_delay = 300s
5. Дальше нужна сеть, которую будем указывать в конфигах, в мануалах рекомендуется смотреть через grep в подсетях, но на текущих версиях docker подсетей нет, используется просто network
В моем случае это - 172.17.0.0/16
6. Добавление строки в файл pg_hba.conf
host replication all 172.26.0.1/16 trust - trust можно заменить на проверку достоверности/
9. Перезапуск контейнера master
docker restart master
10.Делаем pg_basebackup внутри контейнера master
pg_basebackup -h primary -U repluser -D /basebackup -P -Xs -R
11. Обновление данных на реплике
rm -rf docker/replica/data/postgresql 
cp -r docker/master/data/basebackup docker/slave/data/postgresql/
12. Перезагружаем контейнеры
docker restart master
docker restart slave
13. На master можно проверить состояние репликации
select * from pg_stat_replication;
pid|usesysid|usename |application_name|client_addr|client_hostname|client_port|backend_start                |backend_xmin|state    |sent_lsn |write_lsn|flush_lsn|replay_lsn|write_lag      |flush_lag      |replay_lag     |sync_priority|sync_state|reply_time                   |
---+--------+--------+----------------+-----------+---------------+-----------+-----------------------------+------------+---------+---------+---------+---------+----------+---------------+---------------+---------------+-------------+----------+-----------------------------+
 80|   16389|repluser|walreceiver     |172.21.0.3 |               |      38464|2024-02-11 15:58:02.450 +0300|747         |streaming|0/30136B8|0/30136B8|0/30136B8|0/30136B8 |00:00:00.000908|00:00:00.001365|00:00:00.001366|            0|async     |2024-02-11 16:00:12.730 +0300|```
14. На slave можно проверить состояние репликации
select * from pg_stat_wal_receiver;
 pid|status   |receive_start_lsn|receive_start_tli|written_lsn|flushed_lsn|received_tli|last_msg_send_time           |last_msg_receipt_time        |latest_end_lsn|latest_end_time              |slot_name|sender_host|sender_port|conninfo                                                                                                                                                                                                                                                       |
---+---------+-----------------+-----------------+-----------+-----------+------------+-----------------------------+-----------------------------+--------------+-----------------------------+---------+-----------+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 30|streaming|0/3000000        |                1|0/30136B8  |0/30136B8  |           1|2024-02-11 16:00:12.728 +0300|2024-02-11 16:00:12.729 +0300|0/30136B8     |2024-02-11 16:00:12.728 +0300|         |master    |       5432|user=repluser passfile=/root/.pgpass channel_binding=prefer dbname=replication host=primary port=5432 fallback_application_name=walreceiver sslmode=prefer sslcompression=0 sslcertmode=allow sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsr|
15. На master можно создать какие-то данные
CREATE TABLE users (
                     id SERIAL PRIMARY KEY,
                     test INT
);

INSERT INTO users (test) VALUES
(1),
(2),
(3);
16. Для реализации логической репликации необходимо изменить настройки master и slave в postgresql.conf и перезагружаем контейнер
wal_level = logical
max_replication_slots = 10
max_wal_senders = 10
wal_level = logical
docker restart primary
docker restart replica
17. На master выполняем следующие команды(Создаем пользователя и репликационный слот)
CREATE USER replication_user REPLICATION LOGIN CONNECTION LIMIT 1 ENCRYPTED PASSWORD 'your_password';

SELECT * FROM pg_create_logical_replication_slot('replica_slot', 'pgoutput');
Ожидаем результат

slot_name   |lsn      |
------------+---------+
replica_slot|0/1971F68|
18. На primary проверяем репликационный слот
SELECT * FROM pg_replication_slots;
slot_name   |plugin  |slot_type|datoid|database  |temporary|active|active_pid|xmin|catalog_xmin|restart_lsn|confirmed_flush_lsn|wal_status|safe_wal_size|two_phase|conflicting|
------------+--------+---------+------+----------+---------+------+----------+----+------------+-----------+-------------------+----------+-------------+---------+-----------+
replica_slot|pgoutput|logical  | 16384|primary_db|false    |false |          |    |745         |0/1971F30  |0/1971F68          |reserved  |             |false    |false      |
18. На slave оформляем подписку(где 172.25.0.2 API адрес БД primary)
CREATE SUBSCRIPTION db_sub CONNECTION 'host=172.20.0.2 user=replication_user password=your_password dbname=primary_db' PUBLICATION db_pub;
19. На replica можно проверить состояние репликации
SELECT * FROM pg_stat_subscription;
Ожидаем результат

subid|subname    |pid|leader_pid|relid|received_lsn|last_msg_send_time           |last_msg_receipt_time        |latest_end_lsn|latest_end_time              |
-----+-----------+---+----------+-----+------------+-----------------------------+-----------------------------+--------------+-----------------------------+
16389|replica_sub| 47|          |     |0/1971E58   |2024-02-22 21:00:13.645 +0300|2024-02-22 21:00:13.645 +0300|0/1971E58     |2024-02-22 21:00:13.645 +0300|

Из неочевидных проблем с которыми столкнулся, если делать репликацию руками, то контейнер успевает увидеть, что удаляются конфиги постгрес и перезапускает контейнер с восстановлением или отключает его в зависимиости от настроек конфига. Данную проблема была решена с помощью автоматизаций действий.